Diplomado Desarrollo FullStack Web y Movil - Módulo 1 (Desarrollo de Back-end con Node JS)

Evaluación Final

1. ¿Cuál es la diferencia entre una variable de tipo LET y de tipo CONST?

*a) La variable LET puede ser asignada nuevamente, mientras la variable CONST no puede ser reasignada
b) La variable LET puede contener cualquier tipo de dato, mientras que la variable CONST solo puede contener un tipo de dato
c) La variable LET puede ser accedida en cualquier lugar del código, mientras que la variable CONST solo se puede acceder en el bloque que fue definida
d) La variable LET puede incrementarse, mientras que la variable CONST solo puede decrementarse

2. ¿Qué es el DOM?

*a) Un objeto llamado `document` que contiene el árbol de elementos HTML y modela los objetos del documento
b) Un patrón de diseño llamado Data Object Model para modelar datos en Javascript
c) Un patrón de diseño llamado Direct Object Model para modelar eventos en Javascript
d) Un mecanismo para poder usar `alert` y `prompt` 

3. ¿Cómo se genera un archivo de proyecto `package.json`?

*a) Mediante el comando `npm init -y`
b) Mediante el comando `node init -y`
c) Mediante el comando `npm new project`
d) Mediante el comando `node new project`

4. ¿Cómo se instalan módulos de terceros en un proyecto?

*a) Mediante el comando `npm install <package> --save`
b) Mediante el comando `node install <package> --save`
c) Mediante el comando `npm add <package> --save`
d) Mediante el comando `node add <package> --save`

5. ¿Qué es un callback?

*a) Una función que se pasa como parámetro en otra función para ser llamada en tiempo asíncrono
b) Una función anónima que tiene los mismos parámetros que la función original
c) Una función flecha que es mandada a llamar cuándo algo sale mal
d) Una función que recibe otra función para llamarla después

6. ¿Qué es una promesa?

*a) Un nuevo objeto que recibe un callback con `resolve` y `reject` y posee un mecanismo `.then` y `.catch` para resolver o rechazar un código
b) Un callback `resolve` y `reject` que recibe cualquier función
c) Una función `then` y `catch` que convierten el código en lineal
d) Un evento on `resolve` y `reject` que emite la resolución o rechazo a un código

7. ¿Cómo se define un módulo dentro del proyecto?

*a) Es cualquier archivo `.js` que usa `module.exports` para exportar funcionalidad o datos
b) Es un archivo especial llamado `index.js` que usa `export.module` para exportar funcionalidad o datos
c) Es una carpeta que contiene un `package.json` y un `index.js` que usa `module_exports` para exportar funcionalidad o datos
d) No se pueden definir módulos dentro del proyecto, solo se pueden instalar módulos de terceros

8. ¿Cómo se puede crear un servidor HTTP nativo en NodeJS?

*a) Usando `http.createServer((request, response) => {})`
b) Usando `app.get((request, response) => {})`
c) Usando `server.listen((request, response) => {})`
d) Usando `http.listen(8080, (request, response) => {})`

9. ¿Cómo se crea un API tipo GET con Express?

*a) Usando `const router = express.Router()`, `router.get(<handler>)` y `app.use(<path>, <router>)`
b) Usando `const router = express.Router()`, `router.on("GET", (request, response) => {})` y `app.use(<path>, <router>)`
c) Usando `const router = express.createRouter()`, `router.on("GET", (request, response) => {})` y `app.addRouter(<path>, <router>)`
d) Usando `const router = express.createRouter()`, `router.get(<handler>)` y `app.addRouter(<path>, <router>)`

10. ¿Cómo podemos recuperar los parámetros query enviados en la URL?

*a) Usando `request.query`
b) Usando `request.params`
c) Usando `response.query`
d) Usando `response.params`

11. ¿Cómo podemos recuperar los parámetros dinámicos enviados en la URL?

*a) Usando `request.params`
b) Usando `request.query`
c) Usando `response.query`
d) Usando `response.params`

12. ¿Cómo podemos acceder al cuerpo JSON enviado en peticiones POST/PUT/DELETE/...?

*a) Usando `request.body`
b) Usando `request.json()`
c) Usando `response.body`
d) Usando `response.json()`

13. ¿Cómo podemos responderle al usuario con el estatus 200 y un JSON?

*a) Usando `response.status(200).json(<data>)`
b) Usando `response.setStatus(200).setJson(<data>)`
c) Usando `response.write(200, <data>)`
d) Usando `response.write(200, JSON.stringify(<data>))`

14. ¿Cómo podemos acceder a la base de datos MySQL desde NodeJS?

*a) Instalando el módulo `mysql2` y `connection.execute(<sql>, <params>)`
b) Instalando el módulo `sql` y `connection.execute(<sql>, <params>)`
c) Instalando el módulo `mysql2` y `connection.preparedStatement(<sql>, <params>)`
d) Instalando el módulo `sql` y `connection.preparedStatement(<sql>, <params>)`

15. ¿Cuál de las siguientes es la mejor arquitectura propuesta para nuestro proyecto?

*a) Crear una carpeta de rutas y otra de servicios, siguiendo la arquitectura `index.js`
b) Crear una carpeta de rutas y otra de servicios, siguiendo la arquitectura `main.js`
c) Crear una carpeta de api y otra de lib, siguiendo la arquitectura `index.js`
d) Crear una carpeta de api y otra de lib, siguiendo la arquitectura `main.js`

16. ¿Cuál es la diferencia entre un Servicio y un MicroServicio?

*a) Al crear un proyecto, los MicroServicios sólo se enfocan en ciertas funcionalidades aisladas, haciendo el código más mantenible
b) Al crear un proyecto, los MicroServicios sólo se enfocan en una única funcionalidad, haciendo el código menos mantenible
c) Al crear un proyecto, los Servicios abarcan demasiadas funcionalidades, haciendo el código bastante mantenible
d) Al crear un proyecto, los Servicios dependen unos de otros, haciendo que automáticamente se vuelvan MicroServicios

17. Completa el siguiente código

* Pregunta Abierta

	const http = require("http")

	// TODO: 1. Importa el módulo "express" en la variable express

	const app = express()

	app.get("/", (request, response) => {

		// TODO: 2. Responde al usuario con "Hola mundo" usando `response`

	})

	const server = http.createServer(app)

	// TODO: 3. Prende el servidor en el puerto 5000 con `server.listen(...)`












